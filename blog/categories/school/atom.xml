<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: School | My Octopress Blog]]></title>
  <link href="http://joshuabamboo.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://joshuabamboo.github.io/"/>
  <updated>2014-10-15T09:08:01-04:00</updated>
  <id>http://joshuabamboo.github.io/</id>
  <author>
    <name><![CDATA[Josh Owens]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Communicating With Other Classes]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/10/14/communicating-with-other-classes/"/>
    <updated>2014-10-14T22:15:57-04:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/10/14/communicating-with-other-classes</id>
    <content type="html"><![CDATA[<p>When creating multiple classes, I noticed I was having a hard time wrapping my head around calling methods that weren&rsquo;t defined in my class. If you&rsquo;re like me, you had a hard time understanding how you could access methods from other classes. Here&rsquo;s an example of what I mean:</p>

<pre><code class="ruby">        class Artist
            @@artists = []
            attr_accessor :name, :songs, :genres

            def initialize
                @songs = []
            @genres = []
            @@artists &lt;&lt; self
            end

            def add_song(song)                      ### passing in a parameter that's an instance of the Song class
                @songs &lt;&lt; song
            @genres &lt;&lt; song.genre       ### calling genre method from the Song class
            if song.genre                  
              song.genre.add_artist(self)
            end
            end
        end


        class Song
            attr_accessor :name, :artist, :genre

            def genre=(genre)                           ### passing in a parameter that's an instance of the Genre class
                @genre = genre
                genre.add_song(self)        ### calling add_song method from the Genre class
            end
        end


        class Genre
                attr_accessor :name, :songs, :artists
                @@genres = []

            def initialize
                    @songs = [] 
                    @artists = []
                    @@genres &lt;&lt; self
            end


            def add_song(song)
                    @songs &lt;&lt; song
            end


            def add_artist(artist)
                    @artists &lt;&lt; artist
                    @artists.uniq!
            end
        end
</code></pre>

<p>Here we have three classes (Artist, Song, Genre). Notice the comments (###). These classes are calling methods that do not exist in their class. This can be confusing, especially if you&rsquo;re thinking about the concept of <a href="http://www.techotopia.com/index.php/Ruby_Variable_Scope">scope</a>. The method isn&rsquo;t defined. How could I possibly use it, right?! Wrong.</p>

<p>A simple step back helped me finally wrap my head around it. Think about a class that already exists that we use all the time, like arrays.</p>

<h5>Array is a class (Just like the ones we created above)</h5>

<pre><code class="ruby">        class Array
            ...
        end
</code></pre>

<h5>A new array is an instance within the class Array</h5>

<pre><code>    `rappers = []`
</code></pre>

<p>is the same as</p>

<pre><code> `rappers = Array.new`
</code></pre>

<h5>Now we can pass our rappers array as an argument into another class&#8217; method</h5>

<pre><code class="ruby">        class Artist
            def count_rappers(rappers)
                rappers.size                    ### calling size method on rappers array
            end             
        end
</code></pre>

<p>Note that we are calling size on rappers, but we have not defined any method called size in our Artist class. The reason we have access to the size method is because it is one of the many methods within the class Array.</p>

<pre><code class="ruby ">        class Array
            def size
                ...
            end
        end
</code></pre>

<p>Rappers is an instance of the class Array; therefore, methods within that class can be called on the rappers array. This is really no different than the first example of the Artist, Genre and Song classes. Within the Artist class, the add_song method is being passed a parameter that is an instance of the Song class. This allows us to then call methods from the Song class on that instance. Similarly, in the Song class we can access the Genre class method by passing in an instance of Genre. As long as the method&rsquo;s parameter is an instance of a particular class, we will always be able to reach into that class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/10/14/my-first-post-on-octopress/"/>
    <updated>2014-10-14T20:09:45-04:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/10/14/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://www.gravity.com/wp-content/uploads/2010/10/635x282xhello-world.gif.pagespeed.ic.WhWgdjIQuE.png">http://www.gravity.com/wp-content/uploads/2010/10/635x282xhello-world.gif.pagespeed.ic.WhWgdjIQuE.png</a>&#8221;></p>
]]></content>
  </entry>
  
</feed>
