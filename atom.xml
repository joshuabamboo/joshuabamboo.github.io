<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Irrationally Coded]]></title>
  <link href="http://joshuabamboo.github.io/atom.xml" rel="self"/>
  <link href="http://joshuabamboo.github.io/"/>
  <updated>2014-12-16T21:00:44-05:00</updated>
  <id>http://joshuabamboo.github.io/</id>
  <author>
    <name><![CDATA[Josh Owens]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Secret Project: Day 3]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/24/the-secret-project-day-3/"/>
    <updated>2014-11-24T21:46:45-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/24/the-secret-project-day-3</id>
    <content type="html"><![CDATA[<p>Integration with Soundcloud</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Javascript Weekend]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/24/a-javascript-weekend/"/>
    <updated>2014-11-24T09:21:01-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/24/a-javascript-weekend</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Secret Project: Day 2]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/24/the-secret-project-day-2/"/>
    <updated>2014-11-24T09:20:48-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/24/the-secret-project-day-2</id>
    <content type="html"><![CDATA[<p>Event Handlers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Secret Project: Day 1]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/24/the-secret-project-day-1/"/>
    <updated>2014-11-24T09:20:28-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/24/the-secret-project-day-1</id>
    <content type="html"><![CDATA[<p>Make it work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons From My First Meetup Presentation]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/24/lessons-from-my-first-meetup-presentation/"/>
    <updated>2014-11-24T09:19:56-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/24/lessons-from-my-first-meetup-presentation</id>
    <content type="html"><![CDATA[<p>1.) Only build what you need.
My partner and I spent the beginning of the week building out a user model. It was beautiful.</p>

<p>2.) Fake it &lsquo;til you make it.</p>

<p>3.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 5 Keyboard Shortcuts You Can Use Constantly]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/24/top-10-life-changing-keyboard-shortcuts/"/>
    <updated>2014-11-24T09:18:16-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/24/top-10-life-changing-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>Okay, so you&rsquo;ve <a href="http://joshuabamboo.github.io/blog/2014/11/12/test/">modified your keyboard to make the Caps Lock a more useful button</a>. Now, let&rsquo;s actually put that new Control(^) button to use.</p>

<h2>Here are my top 6 time-saving shortcuts I use constantly:</h2>

<blockquote><ol>
<li>Control-a - Jumps to the beginning of a line. (Similarly, Control-e jumps to the end)</li>
<li>Shift-Command- ←or→ - Highlight the text to the left or right of your curser. This is particularly helpful when trying to delete, cut, or copy a line.</li>
<li>Control-r (in the Terminal) - Allows you to search your previous commands. Sort of like pressing the up arrow, but using a keyword search instead.</li>
<li>Function-Delete - Forward delete. When I switched from PC to Mac, this was the only thing I missed until I realized Macs (of course) have it, too.</li>
<li>Command-Control-Shift-4 - Copy screen grab to your clipboard. Before this trick, my Desktop was littered with random screenshots I saved to my computer only to drop them in an email or website.</li>
<li>Command-Tab - To switch between running programs. Tapping tab allows you to loop through (The directional pad serves the same function). Make your selection by releasing Command.</li>
</ol>
</blockquote>

<p>Although the benefits are marginal, marginal benefits add up quickly.</p>

<h3>Let&rsquo;s make some (conservative) assumptions:</h3>

<blockquote><ul>
<li>As a programmer, you&rsquo;re on your computer 8 hours/day</li>
<li>You probably use 5 keyboard shortcuts per hour</li>
<li>Each keyboard shortcut nets 2 saved seconds</li>
</ul>
</blockquote>

<p>That&rsquo;s 29,200 seconds per year &ndash; The equivalent of an entire work day!</p>

<p>(((10 seconds per hour * 8 hours * 365 days)/60)/60) = 8.11 hours</p>

<p>Additional resources:
<a href="https://www.macupdate.com/app/mac/44454/hotkey-eve">Eve</a> is a great learning tool that notifies you of the keyboard shortcut every time you do something with the curser.</p>

<p>Apple&rsquo;s documentation provides a comprehensive overview of emacs shortcuts: <a href="http://support.apple.com/en-us/HT201236">http://support.apple.com/en-us/HT201236</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Developers Keyboard]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/12/test/"/>
    <updated>2014-11-12T09:15:51-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/12/test</id>
    <content type="html"><![CDATA[<p>As a developer you&rsquo;ll spend a lot of time working with your keyboard, and consequently you&rsquo;ll start to learn all the shortcuts to optimize your workflow. One of the most useful hacks I&rsquo;ve found is to replace the caps lock functionality for another control button.</p>

<p>If you&rsquo;re using OS X v.10.9 (Mavericks), just follow these simple steps:</p>

<p>1.) Open your keyboard settings found in System Preferences
<img src="../images/modify-keyboard-1.png" alt="Finding Keyboard in System Preferences" /></p>

<p>2.) Make sure the &lsquo;keyboard&rsquo; tab is selected and click the &lsquo;Modifier keys&hellip;&rsquo; button
<img src="../images/modify-keyboard-2.png" alt="Select" /></p>

<p>3.) Here is where the magic happens. Just select &lsquo;^ Control&rsquo; from the Caps Lock dropdown, and apply the changes.
<img src="../images/modify-keyboard-3.png" alt="Change" /></p>

<p>Simple as that. Congrats on stepping your keyboard game up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your Title in There]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/05/your-title-in-there/"/>
    <updated>2014-11-05T19:31:56-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/05/your-title-in-there</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computer Man]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/11/03/computer-man/"/>
    <updated>2014-11-03T09:25:06-05:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/11/03/computer-man</id>
    <content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?feature=player_embedded&v=NWD7iqtOJSE
" target="_blank"><img src="http://img.youtube.com/vi/NWD7iqtOJSE/0.jpg"
alt="Computer Man" width="240" height="180" border="10" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIL Konstantin Haase Rebuilt Sinatra... In 6 Lines!]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/10/27/til-konstantin-haase-rebuilt-sinatra-dot-dot-dot-in-6-lines/"/>
    <updated>2014-10-27T20:44:47-04:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/10/27/til-konstantin-haase-rebuilt-sinatra-dot-dot-dot-in-6-lines</id>
    <content type="html"><![CDATA[<p>That&rsquo;s right - 6 Lines.</p>

<p>Sinatra, a stripped-down alternative to Ruby frameworks like Rails, is known for being lightweight and flexible. It&rsquo;s not a framework and doesn&rsquo;t require using the Model-View-Controller architecture pattern. Even still, a simple DSL like Sinatra has a lot going on behind the scenes. Sinatra is just under 2,000 lines of code (LOC). Rails, by comparison, is ??,???.</p>

<p>Konstantin Haase managed to create a Sinatra clone called <a href="https://github.com/rkh/almost-sinatra">Almost Sinatra</a> using just 6 lines of code. Here&rsquo;s it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w.rack tilt date INT TERM.</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span><span class="nb">trap</span><span class="p">(</span><span class="n">l</span><span class="p">){</span><span class="vg">$r</span><span class="o">.</span><span class="n">stop</span><span class="p">}</span><span class="k">rescue</span> <span class="nb">require</span> <span class="n">l</span><span class="p">};</span><span class="vg">$u</span><span class="o">=</span><span class="no">Date</span><span class="p">;</span><span class="vg">$z</span><span class="o">=</span><span class="p">(</span><span class="vg">$u</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">year</span> <span class="o">+</span> <span class="mi">145</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span><span class="p">;</span><span class="nb">puts</span> <span class="s2">&quot;== Almost Sinatra/No Version has taken the stage on </span><span class="si">#$z</span><span class="s2"> for development with backup from Webrick&quot;</span>
</span><span class='line'><span class="vg">$n</span><span class="o">=</span><span class="no">Module</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="kp">extend</span> <span class="no">Rack</span><span class="p">;</span><span class="n">a</span><span class="p">,</span><span class="n">D</span><span class="p">,</span><span class="n">S</span><span class="p">,</span><span class="n">q</span><span class="o">=</span><span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="o">.</span><span class="n">new</span><span class="p">,</span><span class="no">Object</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:define_method</span><span class="p">),</span><span class="sr">/@@ *([^\n]+)\n(((?!@@)[^\n]*\n)*)/m</span>
</span><span class='line'><span class="sx">%w[get post put delete]</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span><span class="n">D</span><span class="o">.</span><span class="p">(</span><span class="n">m</span><span class="p">){</span><span class="o">|</span><span class="n">u</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="o">|</span><span class="n">a</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">u</span><span class="p">){</span><span class="n">run</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">e</span><span class="p">){</span><span class="o">[</span><span class="mi">200</span><span class="p">,{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;text/html&quot;</span><span class="p">},</span><span class="o">[</span><span class="n">a</span><span class="o">.</span><span class="n">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="p">)</span><span class="o">]]</span><span class="p">}}}}</span>
</span><span class='line'><span class="no">Tilt</span><span class="o">.</span><span class="n">mappings</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span><span class="n">D</span><span class="o">.</span><span class="p">(</span><span class="n">k</span><span class="p">){</span><span class="o">|</span><span class="n">n</span><span class="p">,</span><span class="o">*</span><span class="n">o</span><span class="o">|</span><span class="vg">$t</span><span class="o">||=</span><span class="p">(</span><span class="n">h</span><span class="o">=</span><span class="vg">$u</span><span class="o">.</span><span class="n">_jisx0301</span><span class="p">(</span><span class="s2">&quot;hash, please&quot;</span><span class="p">);</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="nb">caller</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="sr">/^[^:]+/</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">S</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">a</span><span class="o">]=</span><span class="n">b</span><span class="p">};</span><span class="n">h</span><span class="p">);</span><span class="n">v</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">o</span><span class="p">){</span><span class="n">n</span><span class="o">==</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="sc">?n</span><span class="p">:</span><span class="vg">$t</span><span class="o">[</span><span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">o</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">try</span><span class="p">(</span><span class="ss">:[]</span><span class="p">,</span><span class="ss">:locals</span><span class="p">)</span><span class="o">||</span><span class="p">{})}}</span>
</span><span class='line'><span class="sx">%w[set enable disable configure helpers use register]</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span><span class="n">D</span><span class="o">.</span><span class="p">(</span><span class="n">m</span><span class="p">){</span><span class="o">|*</span><span class="n">_</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="o">|</span><span class="n">b</span><span class="o">.</span><span class="n">try</span> <span class="ss">:[]</span><span class="p">}};</span><span class="k">END</span><span class="p">{</span><span class="no">Rack</span><span class="o">::</span><span class="no">Handler</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;webrick&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="ss">Port</span><span class="p">:</span><span class="vg">$z</span><span class="p">){</span><span class="o">|</span><span class="n">s</span><span class="o">|</span><span class="vg">$r</span><span class="o">=</span><span class="n">s</span><span class="p">}}</span>
</span><span class='line'><span class="sx">%w[params session]</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span><span class="n">D</span><span class="o">.</span><span class="p">(</span><span class="n">m</span><span class="p">){</span><span class="n">q</span><span class="o">.</span><span class="n">send</span> <span class="n">m</span><span class="p">}};</span><span class="n">a</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Session</span><span class="o">::</span><span class="no">Cookie</span><span class="p">;</span><span class="n">a</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Lock</span><span class="p">;</span><span class="n">D</span><span class="o">.</span><span class="p">(</span><span class="ss">:before</span><span class="p">){</span><span class="o">|&amp;</span><span class="n">b</span><span class="o">|</span><span class="n">a</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Config</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="p">};</span><span class="n">before</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="n">q</span><span class="o">=</span><span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span> <span class="n">e</span><span class="p">;</span><span class="n">q</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span><span class="n">params</span><span class="o">[</span><span class="n">k</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]=</span><span class="n">v</span><span class="p">}}}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://p.gr-assets.com/540x540/fit/hostedimages/1383924783/6705751.gif" alt="Mind Blown" /></p>

<p>This is obviously just a fun exercize. As he explains in <a href="http://vimeo.com/61087285">this video on obfuscation</a>, this was just &ldquo;an interesting project I did on the weekend.&rdquo; <a href="http://oi39.tinypic.com/14b6nmu.jpg">#NoBigDeal</a></p>

<p>Give the video a look and check him out of twitter <a href="https://twitter.com/konstantinhaase">@konstantinhaase</a>. Not only is the content interesting, he&rsquo;s a really funny guy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Communicating With Other Classes]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/10/14/communicating-with-other-classes/"/>
    <updated>2014-10-14T22:15:57-04:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/10/14/communicating-with-other-classes</id>
    <content type="html"><![CDATA[<p>When creating multiple classes, I noticed I was having a hard time wrapping my head around calling methods that weren&rsquo;t defined in my class. If you&rsquo;re like me, you had a hard time understanding how you could access methods from other classes. Here&rsquo;s an example of what I mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>      <span class="vc">@@artists</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">:genres</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>          <span class="vi">@songs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vi">@genres</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vc">@@artists</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">add_song</span><span class="p">(</span><span class="n">song</span><span class="p">)</span>      <span class="c1">### passing in a parameter that&#39;s an instance of the Song class</span>
</span><span class='line'>          <span class="vi">@songs</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>      <span class="vi">@genres</span> <span class="o">&lt;&lt;</span> <span class="n">song</span><span class="o">.</span><span class="n">genre</span>    <span class="c1">### calling genre method from the Song class</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">song</span><span class="o">.</span><span class="n">genre</span>
</span><span class='line'>        <span class="n">song</span><span class="o">.</span><span class="n">genre</span><span class="o">.</span><span class="n">add_artist</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Song</span>
</span><span class='line'>      <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:artist</span><span class="p">,</span> <span class="ss">:genre</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">genre</span><span class="o">=</span><span class="p">(</span><span class="n">genre</span><span class="p">)</span>        <span class="c1">### passing in a parameter that&#39;s an instance of the Genre class</span>
</span><span class='line'>          <span class="vi">@genre</span> <span class="o">=</span> <span class="n">genre</span>
</span><span class='line'>          <span class="n">genre</span><span class="o">.</span><span class="n">add_song</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>  <span class="c1">### calling add_song method from the Genre class</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Genre</span>
</span><span class='line'>          <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">:artists</span>
</span><span class='line'>          <span class="vc">@@genres</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>              <span class="vi">@songs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>              <span class="vi">@artists</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>              <span class="vc">@@genres</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">add_song</span><span class="p">(</span><span class="n">song</span><span class="p">)</span>
</span><span class='line'>              <span class="vi">@songs</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">add_artist</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
</span><span class='line'>              <span class="vi">@artists</span> <span class="o">&lt;&lt;</span> <span class="n">artist</span>
</span><span class='line'>              <span class="vi">@artists</span><span class="o">.</span><span class="n">uniq!</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have three classes (Artist, Song, Genre). Notice the comments (###). These classes are calling methods that do not exist in their class. This can be confusing, especially if you&rsquo;re thinking about the concept of <a href="http://www.techotopia.com/index.php/Ruby_Variable_Scope">scope</a>. The method isn&rsquo;t defined. How could I possibly use it, right?! Wrong.</p>

<p>A simple step back helped me finally wrap my head around it. Think about a class that already exists that we use all the time, like arrays.</p>

<h5>Array is a class (Just like the ones we created above)</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>A new array is an instance within the class Array</h5>

<p><code>rappers = []</code></p>

<p>is the same as</p>

<p><code>rappers = Array.new</code></p>

<h5>Now we can pass our rappers array as an argument into another class&#8217; method</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">count_rappers</span><span class="p">(</span><span class="n">rappers</span><span class="p">)</span>
</span><span class='line'>          <span class="n">rappers</span><span class="o">.</span><span class="n">size</span>     <span class="c1">### calling size method on rappers array</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we are calling size on rappers, but we have not defined any method called size in our Artist class. The reason we have access to the size method is because it is <a href="http://www.ruby-doc.org/core-2.1.3/Array.html">one of the many methods within the class Array</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">size</span>
</span><span class='line'>          <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rappers is an instance of the class Array; therefore, methods within that class can be called on the rappers array. This is really no different than the first example of the Artist, Genre and Song classes. Within the Artist class, the add_song method is being passed a parameter that is an instance of the Song class. This allows us to then call methods from the Song class on that instance. Similarly, in the Song class we can access the Genre class method by passing in an instance of Genre. As long as the method&rsquo;s parameter is an instance of a particular class, we will always be able to reach into that class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://joshuabamboo.github.io/blog/2014/10/14/my-first-post-on-octopress/"/>
    <updated>2014-10-14T20:09:45-04:00</updated>
    <id>http://joshuabamboo.github.io/blog/2014/10/14/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p><img src="http://www.gravity.com/wp-content/uploads/2010/10/635x282xhello-world.gif.pagespeed.ic.WhWgdjIQuE.png"></p>
]]></content>
  </entry>
  
</feed>
